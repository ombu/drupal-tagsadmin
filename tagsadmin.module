<?php
/**
 * @file
 * Code for the Tags Admin feature.
 */

include_once 'tagsadmin.features.inc';

/**
 * Implements hook_menu().
 */
function tagsadmin_menu_alter(&$items) {

  // Override the term list callback.
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['page callback'] = 'tagsadmin_term_list_page';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['page arguments'] = array(3);

  // Add a delete task.
  $items['taxonomy/term/%taxonomy_term/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    // Pass a NULL argument to ensure that additional path components are not
    // passed to taxonomy_form_term() as the vocabulary machine name argument.
    'page arguments' => array('tagsadmin_taxonomy_term_delete_form', 2, NULL),
    'access callback' => 'taxonomy_term_edit_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'weight' => 20,
  );
}

/**
 * Implements hook_admin_paths().
 */
function tagsadmin_admin_paths() {
  return array(
    'taxonomy/term/*/delete' => TRUE,
  );
}

/**
 * Page callback for `taxonomy/term/{tid}/delete`.
 */
function tagsadmin_taxonomy_term_delete_form($form, &$form_state, $term) {
  module_load_include('inc', 'taxonomy', 'taxonomy.admin');
  $form = drupal_get_form('taxonomy_term_confirm_delete', $term->tid);
  $form['#vocabulary'] = taxonomy_vocabulary_machine_name_load($form['vocabulary_machine_name']['#value']);
  return $form;
}

/**
 * Page callback for tag list page.
 */
function tagsadmin_term_list_page($vocabulary) {
  if (tagsadmin_is_tags_vocabulary($vocabulary->machine_name)) {
    $view = views_get_view('manage_tags');
    $view->set_arguments(array($vocabulary->machine_name));
    $view->init_display();
    $view->pre_execute();
    $view->execute();
    return $view->render();
  }
  else {
    return drupal_get_form('taxonomy_overview_terms', $vocabulary);
  }
}

/**
 * Hide description and relations from tags vocabulary term edit forms.
 */
function tagsadmin_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (tagsadmin_is_tags_vocabulary($form['#vocabulary']->machine_name)) {
    $form['description']['#access'] = FALSE;
    $form['relations']['#access'] = FALSE;
  }
}

/**
 * Add tags vocabulary flag to vocabulary edit form.
 */
function tagsadmin_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  $form['tagsadmin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Tags Admin UI'),
    '#description' => t('Show the terms in a filterable, alphabetical list.'),
    '#default_value' => tagsadmin_is_tags_vocabulary($form['#vocabulary']->machine_name),
  );
  $form['#submit'][] = 'tagsadmin_form_taxonomy_form_vocabulary_submit';
}

/**
 * Submit function for the taxonomy_form_vocabulary form.
 */
function tagsadmin_form_taxonomy_form_vocabulary_submit($form, &$form_state) {
  if (isset($form_state['values']['tagsadmin'])) {
    variable_set('tagsadmin_enabled_' . $form_state['values']['machine_name'], $form_state['values']['tagsadmin']);
  }
}

/**
 * Implements hook_views_data().
 */
function tagsadmin_views_data() {
  $data = array();

  // Link to edit the term
  $data['taxonomy_term_data']['delete_term'] = array(
    'field' => array(
      'title' => t('Term delete link'),
      'help' => t('Provide a simple link to delete the term.'),
      'handler' => 'views_handler_field_term_link_delete',
    ),
  );

  return $data;
}

/**
 * Helper function to determine if the vocabulary is a tags vocabulary.
 */
function tagsadmin_is_tags_vocabulary($vocabulary_machine_name) {
  return variable_get('tagsadmin_enabled_' . $vocabulary_machine_name, 0);
}

/**
 * Field handler to present a term delete link.
 *
 * @ingroup views_field_handlers
 */
class views_handler_field_term_link_delete extends views_handler_field {
  function construct() {
    parent::construct();
    $this->additional_fields['tid'] = 'tid';
    $this->additional_fields['vid'] = 'vid';
    $this->additional_fields['vocabulary_machine_name'] = array(
      'table' => 'taxonomy_vocabulary',
      'field' => 'machine_name',
    );
  }

  function option_definition() {
    $options = parent::option_definition();

    $options['text'] = array('default' => '', 'translatable' => TRUE);

    return $options;
  }

  function options_form(&$form, &$form_state) {
    $form['text'] = array(
      '#type' => 'textfield',
      '#title' => t('Text to display'),
      '#default_value' => $this->options['text'],
    );
    parent::options_form($form, $form_state);
  }

  function query() {
    $this->ensure_my_table();
    $this->add_additional_fields();
  }

  function render($values) {
    // Check there is an actual value, as on a relationship there may not be.
    if ($tid = $this->get_value($values, 'tid')) {
      // Mock a term object for taxonomy_term_edit_access(). Use machine name and
      // vid to ensure compatibility with vid based and machine name based
      // access checks. See http://drupal.org/node/995156
      $term = new stdClass();
      $term->vid = $values->{$this->aliases['vid']};
      $term->vocabulary_machine_name = $values->{$this->aliases['vocabulary_machine_name']};
      if (taxonomy_term_edit_access($term)) {
        $text = !empty($this->options['text']) ? $this->options['text'] : t('delete');
        $tid = $this->get_value($values, 'tid');
        return l($text, 'taxonomy/term/'. $tid . '/delete', array('query' => drupal_get_destination()));
      }
    }
  }
}
